{"name":"Bumblebee","tagline":"Clever face for BEER","body":"bumblebee\r\n=========\r\n\r\nThis is a new UI for adslabs\r\n\r\nA word or two as introduction into this bright new world of perplexity. Mistakes \r\nare wonderful gifts to humanity, IT IS OK TO MAKE MISTAKES. Please let no \r\n'getting it right' kill your creativity!\r\n\r\n\r\nThings may change dramatically, be prepared.\r\n\r\n\r\n\r\ndev setup - linux\r\n=================\r\n\r\nIf you don't have node.js, do this (or equivalent of your distribution):\r\n\r\n```bash\r\n  $ sudo apt-get install node npm grunt-cli\r\n```\r\n\r\nNow (inside the project), run:\r\n\r\n```bash\r\n  # install the dependencies from package.json\r\n  $ npm install\r\n  \r\n  # setup the project (libraries)\r\n  $ grunt setup \r\n```\r\n\r\ndev setup - mac OS X\r\n====================\r\n\r\nIf you have mac port installed, this should work:\r\n\r\n```bash\r\n  $ sudo port install nodejs nodejs-devel npm\r\n```\r\n\r\n(grunt is not available from mac ports, see below)\r\nInside the project's working directory, run:\r\n\r\n```bash\r\n  $ npm install grunt-cli\r\n  $ npm install\r\n  $ node_modules/grunt-cli/bin/grunt setup\r\n```\r\n\r\nAnd you are ready to go!\r\n\r\n\r\nTo help you started, explore two demo applications: ./src/example.html (./src/js/apps/example) and \r\n./src/todo.html (./src/js/apps/todo)\r\n\r\n\r\ntypical dev-cycle\r\n=================\r\n\r\n 1. write tests\r\n 2. write code and make sure tests are passing\r\n 3. ```grunt deploy``` -- this will prepare the target (note: deploy is not yet ready)\r\n\r\n\r\nWhen applicable, take advantage of the headless testing framework! You can edit code and \r\nhave it automatically re-tested.\r\n \r\n```bash\r\n  # run tests (it will reload automatically and report in terminal)\r\n  $ grunt test:watch\r\n  \r\n  # or if you want to just run it once\r\n  $ grunt test\r\n```\r\n\r\nTests can also be opened in a browser, you can zone-in on certain class of tests when editing,\r\nbut you have to reload in your browser\r\n\r\n```bash\r\n   # open the test in a browser\r\n   $ chrome ./test/mocha/todo.spec.html\r\n```\r\n\r\nWhen you want to interact with the server (and see the application through web):\r\n\r\n ```bash\r\n  # start the webserver (it will automatically reload on code changes)\r\n  $ grunt server\r\n  ```\r\n\r\n  \r\nExplanation of the module structure:\r\n====================================\r\n\r\nI have discovered that none of the boilerplate generators are perfect (surprise ;)), hence inspiration was taken from these:\r\n\r\n  - https://github.com/backbone-boilerplate/backbone-boilerplate\r\n  - https://github.com/jkat98/benm\r\n  - https://github.com/artsy/ezel\r\n\r\n\r\nThis is the current file/folder structure, with short explanation:  \r\n\r\n```bash\r\n/bumblebee.\r\n   |-package.json\r\n   |-bower.json\r\n   |-Gruntfile.json\r\n   |-server.js\r\n   |   \r\n   |-/bower_components\r\n   |-/dist\r\n   |-/node_modules\r\n   |-/src/js     <-- our code lives here\r\n   |---apps\r\n   |-----discovery\r\n   |-------img\r\n   |-------styles\r\n   |-------templates\r\n   |---collections\r\n   |---components\r\n   |---libs\r\n   |---modules\r\n   |---views   \r\n   |-/src/libs   <-- external dependencies\r\n   |-/test\r\n   |---mocha\r\n   |-----apps\r\n   |-------discovery\r\n``` \r\n\r\nWe are using bower, because npm (browserify) is not yet ready to package libraries for client development. It works great, but mind the following:\r\n\r\n  - bower.json: specifies libraries that are needed for client-side ie. \r\n         inside browser (e.g. backbone)\r\n  - package.json: lists libraries that are necessary for server-side, ie. development\r\n         (e.g. grunt, webserver)\r\n         \r\n\r\nContents\r\n========\r\n\r\n##### server.js\r\nDevelopment node.js server - it serves the statics files as well as provides proxy for /api\r\n  requests.\r\n\r\n##### Gruntfile.json\r\nvarious instructions and commands, run: grunt --help\r\n  \r\n##### /bower_components & /node_modules\r\nthese will be created once you setup your environment\r\n  \r\n##### /dist\r\nhere we export the deployment-ready version of the code (compacted, minified, ready to be included into flask)\r\n    \r\n##### /src/js\r\n\r\n  - this is the main folder where our code lives\r\n\r\n  - ./apps: because we want to develop several separate applications (e.g. discovery,\r\n    private libraries) I decided to keep them all here.\r\n    \r\n    - each application resides in its own folder, eg. ./apps/discovery and\r\n      will have the standardized structure:\r\n        - config.js = configuration for require.js loader\r\n        - main.js = app creator (think: this code bootstraps app.js)\r\n        - app.js = application itself\r\n        - routes.js = mapping of paths\r\n\r\n        \r\n    - (it seems) that each application may have to carry its own static\r\n      folders, eg. /styles /templates [but maybe we should create\r\n      some mirroring tree just for the static files? Depends on what you\r\n      consider to be a code: templates and css can be viewed as such]\r\n     \r\n  - ```bash\r\n    ./modules\r\n    ./models\r\n    ./collections\r\n    ./views\r\n    ```\r\n    \r\n    - these folders should hold the *general, reusable* code that we develop,\r\n      and that we want to import in our apps\r\n\r\n##### /src/libs\r\n\r\n  - created automatically, when you run grunt setup - contains\r\n    all external dependencies (ie. backbone, requirejs)\r\n    \r\n    \r\n##### /src/img, /src/css\r\n\r\n  - other files (assets) needed for the application (mind that each application\r\n    can also carry within itself some templates and even css; but we should \r\n    limit that to minimum and stick most of the assets here)\r\n\r\n    \r\n##### /test\r\n \r\n  - ./mocha\r\n  \r\n    - because we may want to use several javascript testing frameworks, so far we\r\n      keep the standard structure: [framework]/<tree>\r\n      \r\n    - the folder will mirror the code tree, eg.:\r\n    ```bash\r\n      ./mocha\r\n         |\r\n         /apps\r\n         |  |\r\n         |  /discovery\r\n         |     |\r\n         |     router.specs.js\r\n         |     main.specs.js\r\n         |  ...   \r\n         /modules\r\n             |\r\n             facets.specs.js\r\n     ```\r\n    \r\n\r\n             \r\nYou can refer to the following page for more links and discussion: \r\nhttp://labs.adsabs.harvard.edu/trac/ads-invenio/wiki/BackboneResources\r\n\r\n\r\n\r\nmiscellanea\r\n===========\r\n\r\n- you can run server.js from command line.  If you want to connect to our SOLR server, the easiest thing to do is to tunnel to adswhy:9000 like so:\r\n\r\n  ```bash\r\n  $ ssh -N -f -L 9000:adswhy.cfa.harvard.edu:9000 pogo3.cfa.harvard.edu\r\n  $ env API_ENDPOINT=http://localhost:9000/solr/select HOMEDIR=src node server.js \r\n```\r\n  \r\n- if you want to debug/edit in place node.js code, use supervisor (you need to install it first)\r\n\r\n  ```bash\r\n  $ env API_ENDPOINT=http://localhost:9000/solr/select HOMEDIR=src supervisor server.js \r\n```\r\n\r\n- you can see the search being routed to the SOLR api by accessing: http://localhost:3000/api/search, for instance:\r\n  http://localhost:3000/api/search?q=kurtz\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}