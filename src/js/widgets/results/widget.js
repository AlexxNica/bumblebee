/**
 * Widget to display list of result hits - it allows to paginate through them
 * and display details
 *
 */

define([
    'underscore',
    'js/widgets/list_of_things/widget',
    'js/widgets/base/base_widget'
    ],

  function (_, ListOfThingsWidget, BaseWidget) {

    var ResultsWidget = ListOfThingsWidget.extend({

      showDetailsButton : true,

      mainResults  : true,

      activate: function (beehive) {

        _.bindAll(this, "dispatchInitialRequest", "processResponse");

        this.pubsub = beehive.Services.get('PubSub');

        //custom dispatchRequest function goes here
        this.pubsub.subscribe(this.pubsub.INVITING_REQUEST, this.dispatchInitialRequest);

        //custom handleResponse function goes here
        this.pubsub.subscribe(this.pubsub.DELIVERING_RESPONSE, this.processResponse);
      },


      dispatchInitialRequest  : function(){

        this.resetWidget();

        BaseWidget.prototype.dispatchRequest.apply(this, arguments)
      },


      defaultQueryArguments: function(){
        return {
          hl     : "true",
          "hl.fl": "title,abstract,body",
          fl     : 'title,abstract,bibcode,author,keyword,id,citation_count,pub,aff,email,volume,year',
          rows : 25
        }
      },

      processResponse: function (apiResponse) {

        this.setCurrentQuery(apiResponse.getApiQuery());
        //also let pagination model know
        this.paginationModel.set("currentQuery", this.getCurrentQuery());

        var highlights = apiResponse.get("highlighting")


        //checking to see if we need to reset start or rows values

        var r =  this.getCurrentQuery().get("rows");
        var s = this.getCurrentQuery().get("start");
        if (r){
          if ($.isArray(r)){
            this.paginationModel.set("perPage",r[0])
          }
          else {
            this.paginationModel.set("perPage",r)
          }
        }
        if (s) {
          if ($.isArray(s)) {
            this.paginationModel.set("page", s[0]/ this.paginationModel.get("perPage") + 1)
          }
          else {
            this.paginationModel.set("page", s/ this.paginationModel.get("perPage") + 1)
          }

        }

        var docs = apiResponse.get("response.docs")

        //any preprocessing before adding the resultsIndex is done here
        var docs = _.map(docs, function(d){
          d.identifier = d.bibcode;
          var h = {};

          if (highlights) {

            h = (function () {

              var hl = highlights[d.id];
              var finalList = [];
              //adding abstract,title, etc highlights to one big list
              _.each(_.pairs(hl), function (pair) {
                finalList = finalList.concat(pair[1]);
              });
              finalList = finalList;

              return {
                "highlights": finalList
              }
            }());
          }

          if (h.highlights && h.highlights.length > 0)
            d['details'] = h;

          return d;

        });

        docs = this.parseLinksData(docs);

        this.insertPaginatedDocsIntoCollection(docs, apiResponse)

        //resolving the promises generated by "loadBibcodeData"
        if (this.deferredObject){
          this.deferredObject.resolve(this.paginationModel.get("numFound"))
        }

      }


    });

    return ResultsWidget;

  });
