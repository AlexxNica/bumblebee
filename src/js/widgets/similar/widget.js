/**
 * Widget to display list of result hits - it allows to paginate through them
 * and display details
 *
 */

define([
    'underscore',
    'js/widgets/list_of_things/widget',
    'js/components/api_query'
  ],

  function (
    _,
    ListOfThingsWidget,
    ApiQuery) {


    var SimilarWidget = ListOfThingsWidget.extend({

      initialize: function (options) {

        ListOfThingsWidget.prototype.initialize.apply(this, arguments)

        this.defaultQueryArguments["mlt.count"] = this.paginationModel.get("perPage");
      },


      activate: function (beehive) {
        this.pubsub = beehive.Services.get('PubSub');

        //custom handleResponse function goes here
        this.pubsub.subscribe(this.pubsub.DELIVERING_RESPONSE, this.processResponse);
      },

      loadBibcodeData: function (bibcode) {

        if (bibcode === this._bibcode) {

          this.deferredObject =  $.Deferred();

          this.deferredObject.resolve(this.collection);

          return this.deferredObject.promise();
        }

        this._bibcode = bibcode;

        this.deferredObject = $.Deferred();

        this.dispatchRequest(new ApiQuery({
          'q'     : "bibcode:"+this._bibcode,
          mlt     : "true",
          "mlt.fl": "title,abstract",
          "mlt.count": "20",
        fl      : 'title,bibcode,author,keyword,citation_count,pub,aff,volume,year,links_data,ids_data,[citations],property'

        }));


        return this.deferredObject.promise();
      },


      processResponse: function (apiResponse) {

        this.setCurrentQuery(apiResponse.getApiQuery());

        //also let pagination model know
        this.paginationModel.set("currentQuery", this.getCurrentQuery().url())


        if (!this.collection.numFound){
          //it's an initial batch of information
          var numFound = _.values(apiResponse.get('moreLikeThis'))[0].numFound;
          this.collection.numFound = numFound;
          this.paginationModel.set("numFound", numFound);

          this.collection.reset(this.parseResponse(apiResponse), {
            parse: true
          });
        }

        else {
          this.collection.add(this.parseResponse(apiResponse), {
            parse: true
          })
        }

        this.collection.trigger("collection:augmented")

        //resolving the promises generated by "loadBibcodeData"
        if (this.deferredObject){
          this.deferredObject.resolve(this.collection.numFound)
        }

      },

      //mlt info is in a different place than standard response info
      parseResponse: function (apiResponse) {
        var raw = apiResponse.toJSON();

        //adding order numbers

        var mlt = _.values(raw.moreLikeThis)[0];

        var docs =  mlt.docs;

        var start = mlt.start;

        var docs = _.map(docs, function(doc, index){
          doc.identifier = doc.bibcode;
          doc.resultsIndex = start + index;
          return doc

        })

        //getting links data from LinkGenerator Mixin
        var docs = this.parseLinksData(docs);

        return docs

      },


      onAllInternalEvents: function(ev, arg1, arg2) {

        if (ev == "dataRequest") {

          var start = arg1;

          var rows = arg2;

          var q = this.getCurrentQuery().clone();

          q.unlock();
          q = this.composeQuery(this.defaultQueryArguments, q);

          q.set("mlt.start", start);
          q.set("mlt.count", rows)

          var req = this.composeRequest(q);
          if (req) {
            this.pubsub.publish(this.pubsub.DELIVERING_REQUEST, req);
          }

          if (this.mainResults){
            //letting other interested widgets know that more info was fetched
            //i.e. there was a pagination event
            this.pubsub.publish(this.pubsub.CUSTOM_EVENT, {event: "pagination", data: {start: start, rows: rows}});

          }

          if (this.showLoad === true){
            this.startWidgetLoad()
          }

        }
      }

    })

    return SimilarWidget;

  });
